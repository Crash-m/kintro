#!/usr/bin/perl##############################################################	This program goes through the directory named in its#	first argument. It looks through all non-executable,#	files to see which ones fit a JPEG or GIF format.##	If no first argument is given, then it uses "." as#	the directory.##	If an argument of "-r" is given, then the program#	searches directories recursively.##	Output: a list of HTML statements that give WIDTH and#	HEIGHT attributes##	Written by:#		J. David Eisenberg#		nessus@best.com#############################################################use Config;sub ExtractGIFDimensions{	read( FILE, $buf, 3);	# get rid of "87a" or "89a"	read( FILE, $buf, 4);	# width and height	($w2, $w1, $h2, $h1) = unpack("CCCC", $buf);	$width = $w1 * 256 + $w2;	$height = $h1 * 256 + $h2;	print "<img src=\"$fName\" width=$width height=$height>\n";}sub ExtractJPGDimensions{	# skip back to third byte...	seek( FILE, 2, 0 );	while (1)	{		#		#	read in four bytes (0xff, tag byte, and 2-byte length)		#	when the tag byte equals 0xc0, that is the part of the		#	file which holds the dimensions		#		$nRead = read( FILE, $buf, 4);		last if ($nRead != 4);		($ffByte, $tagByte, $l1, $l2) = unpack("CCCC", $buf);		last if ($ffByte != 0xff);		$len = $l1 * 256 + $l2;		if ($tagByte == 0xc0)		{			$nRead = read( FILE, $buf, 5 );			last if ($nRead != 5);			($infoByte, $h1, $h2, $w1, $w2) = unpack("CCCCC", $buf);			$height = $h1 * 256 + $h2;			$width = $w1 * 256 + $w2;			print "<IMG SRC=\"$fName\" WIDTH=$width HEIGHT=$height>\n";			last;		}				#		#	if it's not the 0xc0 tag, then skip forwards to next area.		#	we subtract 2 from the length since it includes the length		#	bytes, which we've already read.		#		$result = seek( FILE, $len-2, 1);		last if ($result == 0);	}}						sub SearchDir{	local ($dirName) = $_[0];	local ($dirPos);	local (@filelist);		opendir(DH, $dirName) || die ("Cannot open directory $dirName\n");	@filelist = readdir(DH);	closedir(DH);	foreach $fName (@filelist)	{		next if ($fName eq "." || $fName eq "..");		if (!$dirName)		{				$fileSep = "";		}		$fName = $dirName . $fileSep . $fName;		@stats = stat($fName);		if (-d _ && $recursive)		{			print "<!-- Searching $fName -->\n";			&SearchDir( $fName );			print "\n";			next;		}					if (! (-x _ ))		{			# open the file...			if (!open( FILE, $fName))			{				print "<!-- Cannot open file $fName -->\n";				next;			}						# see what kind of file it might be			read( FILE, $signature, 3);			if ($signature eq "GIF")			{				&ExtractGIFDimensions();			}			elsif ($signature eq "\xff\xd8\xff")			{				&ExtractJPGDimensions();			}						close( FILE);		}	}}##	Check to see if we're on a Unix or a Mac system#	Unix uses "/" as its file separator, Mac uses ":"#$macPerl = 0;$fileSep = "/";if ( $Config{'osname'} =~ /^macos/i ){	$macPerl = 1;	$fileSep = ":";}$recursive = 0;if ($ARGV[0] eq "-r"){	$recursive = 1;	$dirName = $ARGV[1];}elsif ($ARGV[1] eq "-r"){	$recursive = 1;	$dirName = $ARGV[0];}$recursive = 0;$dirName = "";if (! $dirName ){	if ($macPerl)	{		$dirName = "";	}	else	{		$dirName = ".";	}}&SearchDir( $dirName );